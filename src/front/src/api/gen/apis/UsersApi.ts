/* tslint:disable */
/* eslint-disable */
/**
 * Domotique API
 * API documentation for the Domotique website.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CompleteUser,
  ErrorResponse,
  LoginInput,
  RegisterInput,
  UserProfile,
} from '../models/index';
import {
    CompleteUserFromJSON,
    CompleteUserToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    LoginInputFromJSON,
    LoginInputToJSON,
    RegisterInputFromJSON,
    RegisterInputToJSON,
    UserProfileFromJSON,
    UserProfileToJSON,
} from '../models/index';

export interface FindUserRequest {
    userId: number;
}

export interface LoginRequest {
    loginInput: LoginInput;
}

export interface RegisterRequest {
    registerInput: RegisterInput;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * 
     * Confirm email
     */
    async confirmEmailRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/confirmEmail`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     * Confirm email
     */
    async confirmEmail(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.confirmEmailRaw(initOverrides);
    }

    /**
     * Gets a user by their ID, and return their public data.
     * Get user by ID
     */
    async findUserRaw(requestParameters: FindUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserProfile>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling findUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/users/{userId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserProfileFromJSON(jsonValue));
    }

    /**
     * Gets a user by their ID, and return their public data.
     * Get user by ID
     */
    async findUser(requestParameters: FindUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserProfile | null | undefined > {
        const response = await this.findUserRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * Log in a user with an email and a password.
     * Log in
     */
    async loginRaw(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompleteUser>> {
        if (requestParameters['loginInput'] == null) {
            throw new runtime.RequiredError(
                'loginInput',
                'Required parameter "loginInput" was null or undefined when calling login().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/users/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginInputToJSON(requestParameters['loginInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompleteUserFromJSON(jsonValue));
    }

    /**
     * Log in a user with an email and a password.
     * Log in
     */
    async login(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompleteUser> {
        const response = await this.loginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Log out the current user from the app.
     * Log out
     */
    async logoutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/users/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Log out the current user from the app.
     * Log out
     */
    async logout(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.logoutRaw(initOverrides);
    }

    /**
     * Gets the currently authenticated user\'s complete data.
     * Get my user profile
     */
    async meRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompleteUser>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/users/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompleteUserFromJSON(jsonValue));
    }

    /**
     * Gets the currently authenticated user\'s complete data.
     * Get my user profile
     */
    async me(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompleteUser> {
        const response = await this.meRaw(initOverrides);
        return await response.value();
    }

    /**
     * Register a new user with an email and a password.
     * Register
     */
    async registerRaw(requestParameters: RegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompleteUser>> {
        if (requestParameters['registerInput'] == null) {
            throw new runtime.RequiredError(
                'registerInput',
                'Required parameter "registerInput" was null or undefined when calling register().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/users/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegisterInputToJSON(requestParameters['registerInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompleteUserFromJSON(jsonValue));
    }

    /**
     * Register a new user with an email and a password.
     * Register
     */
    async register(requestParameters: RegisterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompleteUser> {
        const response = await this.registerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
