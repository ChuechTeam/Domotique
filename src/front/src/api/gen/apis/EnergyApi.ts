/* tslint:disable */
/* eslint-disable */
/**
 * Domotique API
 * API documentation for the Domotique website.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConsumptionOutput,
} from '../models/index';
import {
    ConsumptionOutputFromJSON,
    ConsumptionOutputToJSON,
} from '../models/index';

export interface GetTotalConsumptionRequest {
    end: Date;
    start: Date;
}

/**
 * 
 */
export class EnergyApi extends runtime.BaseAPI {

    /**
     * Get the total consumption with the given time range, in Wh.
     * Get the total consumption
     */
    async getTotalConsumptionRaw(requestParameters: GetTotalConsumptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConsumptionOutput>> {
        if (requestParameters['end'] == null) {
            throw new runtime.RequiredError(
                'end',
                'Required parameter "end" was null or undefined when calling getTotalConsumption().'
            );
        }

        if (requestParameters['start'] == null) {
            throw new runtime.RequiredError(
                'start',
                'Required parameter "start" was null or undefined when calling getTotalConsumption().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['end'] != null) {
            queryParameters['end'] = (requestParameters['end'] as any).toISOString();
        }

        if (requestParameters['start'] != null) {
            queryParameters['start'] = (requestParameters['start'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/energy/total-consumption`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConsumptionOutputFromJSON(jsonValue));
    }

    /**
     * Get the total consumption with the given time range, in Wh.
     * Get the total consumption
     */
    async getTotalConsumption(requestParameters: GetTotalConsumptionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConsumptionOutput> {
        const response = await this.getTotalConsumptionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
