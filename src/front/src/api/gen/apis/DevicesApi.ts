/* tslint:disable */
/* eslint-disable */
/**
 * Domotique API
 * API documentation for the Domotique website.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CompleteDevice,
  DeviceInput,
  DeviceStats,
  DeviceStatsQuery,
  DevicesResponse,
  ErrorResponse,
} from '../models/index';
import {
    CompleteDeviceFromJSON,
    CompleteDeviceToJSON,
    DeviceInputFromJSON,
    DeviceInputToJSON,
    DeviceStatsFromJSON,
    DeviceStatsToJSON,
    DeviceStatsQueryFromJSON,
    DeviceStatsQueryToJSON,
    DevicesResponseFromJSON,
    DevicesResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models/index';

export interface CreateDeviceRequest {
    deviceInput: DeviceInput;
}

export interface DeleteDeviceRequest {
    deviceId: number;
}

export interface GetDeviceByIdRequest {
    deviceId: number;
}

export interface GetDeviceStatsRequest {
    deviceStatsQuery: DeviceStatsQuery;
}

export interface GetDevicesRequest {
    userId?: number;
    name?: string;
    powered?: boolean;
    typeId?: number;
    roomId?: number;
}

export interface UpdateDeviceRequest {
    deviceId: number;
    deviceInput: DeviceInput;
}

/**
 * 
 */
export class DevicesApi extends runtime.BaseAPI {

    /**
     * Creates a new device.
     * Create device
     */
    async createDeviceRaw(requestParameters: CreateDeviceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompleteDevice>> {
        if (requestParameters['deviceInput'] == null) {
            throw new runtime.RequiredError(
                'deviceInput',
                'Required parameter "deviceInput" was null or undefined when calling createDevice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/devices/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeviceInputToJSON(requestParameters['deviceInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompleteDeviceFromJSON(jsonValue));
    }

    /**
     * Creates a new device.
     * Create device
     */
    async createDevice(requestParameters: CreateDeviceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompleteDevice> {
        const response = await this.createDeviceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a device.
     * Delete device
     */
    async deleteDeviceRaw(requestParameters: DeleteDeviceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['deviceId'] == null) {
            throw new runtime.RequiredError(
                'deviceId',
                'Required parameter "deviceId" was null or undefined when calling deleteDevice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/devices/{deviceId}`.replace(`{${"deviceId"}}`, encodeURIComponent(String(requestParameters['deviceId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a device.
     * Delete device
     */
    async deleteDevice(requestParameters: DeleteDeviceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDeviceRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a device by its ID.
     * Get device by ID
     */
    async getDeviceByIdRaw(requestParameters: GetDeviceByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompleteDevice>> {
        if (requestParameters['deviceId'] == null) {
            throw new runtime.RequiredError(
                'deviceId',
                'Required parameter "deviceId" was null or undefined when calling getDeviceById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/devices/{deviceId}`.replace(`{${"deviceId"}}`, encodeURIComponent(String(requestParameters['deviceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompleteDeviceFromJSON(jsonValue));
    }

    /**
     * Gets a device by its ID.
     * Get device by ID
     */
    async getDeviceById(requestParameters: GetDeviceByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompleteDevice | null | undefined > {
        const response = await this.getDeviceByIdRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * Gets the stats for devices.
     * Get device stats
     */
    async getDeviceStatsRaw(requestParameters: GetDeviceStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeviceStats>> {
        if (requestParameters['deviceStatsQuery'] == null) {
            throw new runtime.RequiredError(
                'deviceStatsQuery',
                'Required parameter "deviceStatsQuery" was null or undefined when calling getDeviceStats().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/devices/stats`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeviceStatsQueryToJSON(requestParameters['deviceStatsQuery']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceStatsFromJSON(jsonValue));
    }

    /**
     * Gets the stats for devices.
     * Get device stats
     */
    async getDeviceStats(requestParameters: GetDeviceStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeviceStats | null | undefined > {
        const response = await this.getDeviceStatsRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * Gets all devices from the database matching the given filters. All query parameters are optional.
     * Get devices
     */
    async getDevicesRaw(requestParameters: GetDevicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DevicesResponse>> {
        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['powered'] != null) {
            queryParameters['powered'] = requestParameters['powered'];
        }

        if (requestParameters['typeId'] != null) {
            queryParameters['typeId'] = requestParameters['typeId'];
        }

        if (requestParameters['roomId'] != null) {
            queryParameters['roomId'] = requestParameters['roomId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/devices/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DevicesResponseFromJSON(jsonValue));
    }

    /**
     * Gets all devices from the database matching the given filters. All query parameters are optional.
     * Get devices
     */
    async getDevices(requestParameters: GetDevicesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DevicesResponse> {
        const response = await this.getDevicesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an existing device.
     * Update device
     */
    async updateDeviceRaw(requestParameters: UpdateDeviceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompleteDevice>> {
        if (requestParameters['deviceId'] == null) {
            throw new runtime.RequiredError(
                'deviceId',
                'Required parameter "deviceId" was null or undefined when calling updateDevice().'
            );
        }

        if (requestParameters['deviceInput'] == null) {
            throw new runtime.RequiredError(
                'deviceInput',
                'Required parameter "deviceInput" was null or undefined when calling updateDevice().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/devices/{deviceId}`.replace(`{${"deviceId"}}`, encodeURIComponent(String(requestParameters['deviceId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DeviceInputToJSON(requestParameters['deviceInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompleteDeviceFromJSON(jsonValue));
    }

    /**
     * Updates an existing device.
     * Update device
     */
    async updateDevice(requestParameters: UpdateDeviceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompleteDevice> {
        const response = await this.updateDeviceRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
