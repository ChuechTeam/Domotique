/* tslint:disable */
/* eslint-disable */
/**
 * Domotique API
 * API documentation for the Domotique website.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CompleteDeviceType,
  DeviceTypeInput,
  DeviceTypesResponse,
  ErrorResponse,
} from '../models/index';
import {
    CompleteDeviceTypeFromJSON,
    CompleteDeviceTypeToJSON,
    DeviceTypeInputFromJSON,
    DeviceTypeInputToJSON,
    DeviceTypesResponseFromJSON,
    DeviceTypesResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models/index';

export interface CreateDeviceTypeRequest {
    deviceTypeInput: DeviceTypeInput;
}

export interface DeleteDeviceTypeRequest {
    deviceTypeId: number;
}

export interface GetDeviceTypeByIdRequest {
    deviceTypeId: number;
}

export interface GetDeviceTypesRequest {
    ids?: Array<number>;
}

export interface UpdateDeviceTypeRequest {
    deviceTypeId: number;
    deviceTypeInput: DeviceTypeInput;
}

/**
 * 
 */
export class DeviceTypesApi extends runtime.BaseAPI {

    /**
     * Creates a new device type.
     * Create device type
     */
    async createDeviceTypeRaw(requestParameters: CreateDeviceTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompleteDeviceType>> {
        if (requestParameters['deviceTypeInput'] == null) {
            throw new runtime.RequiredError(
                'deviceTypeInput',
                'Required parameter "deviceTypeInput" was null or undefined when calling createDeviceType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/device-types/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeviceTypeInputToJSON(requestParameters['deviceTypeInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompleteDeviceTypeFromJSON(jsonValue));
    }

    /**
     * Creates a new device type.
     * Create device type
     */
    async createDeviceType(requestParameters: CreateDeviceTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompleteDeviceType> {
        const response = await this.createDeviceTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a device type.
     * Delete device type
     */
    async deleteDeviceTypeRaw(requestParameters: DeleteDeviceTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['deviceTypeId'] == null) {
            throw new runtime.RequiredError(
                'deviceTypeId',
                'Required parameter "deviceTypeId" was null or undefined when calling deleteDeviceType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/device-types/{deviceTypeId}`.replace(`{${"deviceTypeId"}}`, encodeURIComponent(String(requestParameters['deviceTypeId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a device type.
     * Delete device type
     */
    async deleteDeviceType(requestParameters: DeleteDeviceTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteDeviceTypeRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a device type by its ID.
     * Get device type by ID
     */
    async getDeviceTypeByIdRaw(requestParameters: GetDeviceTypeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompleteDeviceType>> {
        if (requestParameters['deviceTypeId'] == null) {
            throw new runtime.RequiredError(
                'deviceTypeId',
                'Required parameter "deviceTypeId" was null or undefined when calling getDeviceTypeById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/device-types/{deviceTypeId}`.replace(`{${"deviceTypeId"}}`, encodeURIComponent(String(requestParameters['deviceTypeId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompleteDeviceTypeFromJSON(jsonValue));
    }

    /**
     * Gets a device type by its ID.
     * Get device type by ID
     */
    async getDeviceTypeById(requestParameters: GetDeviceTypeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompleteDeviceType | null | undefined > {
        const response = await this.getDeviceTypeByIdRaw(requestParameters, initOverrides);
        switch (response.raw.status) {
            case 200:
                return await response.value();
            case 204:
                return null;
            default:
                return await response.value();
        }
    }

    /**
     * Gets all device types from the database.
     * Get device types
     */
    async getDeviceTypesRaw(requestParameters: GetDeviceTypesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeviceTypesResponse>> {
        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/device-types/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeviceTypesResponseFromJSON(jsonValue));
    }

    /**
     * Gets all device types from the database.
     * Get device types
     */
    async getDeviceTypes(requestParameters: GetDeviceTypesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeviceTypesResponse> {
        const response = await this.getDeviceTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an existing device type.
     * Update device type
     */
    async updateDeviceTypeRaw(requestParameters: UpdateDeviceTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompleteDeviceType>> {
        if (requestParameters['deviceTypeId'] == null) {
            throw new runtime.RequiredError(
                'deviceTypeId',
                'Required parameter "deviceTypeId" was null or undefined when calling updateDeviceType().'
            );
        }

        if (requestParameters['deviceTypeInput'] == null) {
            throw new runtime.RequiredError(
                'deviceTypeInput',
                'Required parameter "deviceTypeInput" was null or undefined when calling updateDeviceType().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/device-types/{deviceTypeId}`.replace(`{${"deviceTypeId"}}`, encodeURIComponent(String(requestParameters['deviceTypeId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DeviceTypeInputToJSON(requestParameters['deviceTypeInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompleteDeviceTypeFromJSON(jsonValue));
    }

    /**
     * Updates an existing device type.
     * Update device type
     */
    async updateDeviceType(requestParameters: UpdateDeviceTypeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompleteDeviceType> {
        const response = await this.updateDeviceTypeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
