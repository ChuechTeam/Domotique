/* tslint:disable */
/* eslint-disable */
/**
 * Domotique API
 * API documentation for the Domotique website.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AttributeType } from './AttributeType';
import {
    AttributeTypeFromJSON,
    AttributeTypeFromJSONTyped,
    AttributeTypeToJSON,
    AttributeTypeToJSONTyped,
} from './AttributeType';
import type { DeviceCategory } from './DeviceCategory';
import {
    DeviceCategoryFromJSON,
    DeviceCategoryFromJSONTyped,
    DeviceCategoryToJSON,
    DeviceCategoryToJSONTyped,
} from './DeviceCategory';

/**
 * A device type with all its attributes.
 * @export
 * @interface CompleteDeviceType
 */
export interface CompleteDeviceType {
    /**
     * The name of the device type.
     * @type {string}
     * @memberof CompleteDeviceType
     */
    name: string;
    /**
     * All attributes that devices of this type will have.
     * @type {Array<AttributeType>}
     * @memberof CompleteDeviceType
     */
    attributes: Array<AttributeType>;
    /**
     * The unique identifier of the device type.
     * @type {number}
     * @memberof CompleteDeviceType
     */
    id: number;
    /**
     * 
     * @type {DeviceCategory}
     * @memberof CompleteDeviceType
     */
    category: DeviceCategory;
}



/**
 * Check if a given object implements the CompleteDeviceType interface.
 */
export function instanceOfCompleteDeviceType(value: object): value is CompleteDeviceType {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('attributes' in value) || value['attributes'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('category' in value) || value['category'] === undefined) return false;
    return true;
}

export function CompleteDeviceTypeFromJSON(json: any): CompleteDeviceType {
    return CompleteDeviceTypeFromJSONTyped(json, false);
}

export function CompleteDeviceTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CompleteDeviceType {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'attributes': ((json['attributes'] as Array<any>).map(AttributeTypeFromJSON)),
        'id': json['id'],
        'category': DeviceCategoryFromJSON(json['category']),
    };
}

export function CompleteDeviceTypeToJSON(json: any): CompleteDeviceType {
    return CompleteDeviceTypeToJSONTyped(json, false);
}

export function CompleteDeviceTypeToJSONTyped(value?: CompleteDeviceType | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'attributes': ((value['attributes'] as Array<any>).map(AttributeTypeToJSON)),
        'id': value['id'],
        'category': DeviceCategoryToJSON(value['category']),
    };
}

