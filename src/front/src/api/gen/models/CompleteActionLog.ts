/* tslint:disable */
/* eslint-disable */
/**
 * Domotique API
 * API documentation for the Domotique website.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ActionLogOperation } from './ActionLogOperation';
import {
    ActionLogOperationFromJSON,
    ActionLogOperationFromJSONTyped,
    ActionLogOperationToJSON,
    ActionLogOperationToJSONTyped,
} from './ActionLogOperation';
import type { UserProfile } from './UserProfile';
import {
    UserProfileFromJSON,
    UserProfileFromJSONTyped,
    UserProfileToJSON,
    UserProfileToJSONTyped,
} from './UserProfile';
import type { ActionLogTarget } from './ActionLogTarget';
import {
    ActionLogTargetFromJSON,
    ActionLogTargetFromJSONTyped,
    ActionLogTargetToJSON,
    ActionLogTargetToJSONTyped,
} from './ActionLogTarget';
import type { ActionLogFlags } from './ActionLogFlags';
import {
    ActionLogFlagsFromJSON,
    ActionLogFlagsFromJSONTyped,
    ActionLogFlagsToJSON,
    ActionLogFlagsToJSONTyped,
} from './ActionLogFlags';

/**
 * 
 * @export
 * @interface CompleteActionLog
 */
export interface CompleteActionLog {
    /**
     * 
     * @type {string}
     * @memberof CompleteActionLog
     */
    targetName: string;
    /**
     * 
     * @type {number}
     * @memberof CompleteActionLog
     */
    targetId: number;
    /**
     * 
     * @type {Array<ActionLogFlags>}
     * @memberof CompleteActionLog
     */
    flags: Array<ActionLogFlags>;
    /**
     * 
     * @type {ActionLogTarget}
     * @memberof CompleteActionLog
     */
    targetType: ActionLogTarget;
    /**
     * 
     * @type {number}
     * @memberof CompleteActionLog
     */
    id: number;
    /**
     * 
     * @type {Date}
     * @memberof CompleteActionLog
     */
    time: Date;
    /**
     * 
     * @type {ActionLogOperation}
     * @memberof CompleteActionLog
     */
    operation: ActionLogOperation;
    /**
     * 
     * @type {UserProfile}
     * @memberof CompleteActionLog
     */
    user: UserProfile;
}



/**
 * Check if a given object implements the CompleteActionLog interface.
 */
export function instanceOfCompleteActionLog(value: object): value is CompleteActionLog {
    if (!('targetName' in value) || value['targetName'] === undefined) return false;
    if (!('targetId' in value) || value['targetId'] === undefined) return false;
    if (!('flags' in value) || value['flags'] === undefined) return false;
    if (!('targetType' in value) || value['targetType'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('time' in value) || value['time'] === undefined) return false;
    if (!('operation' in value) || value['operation'] === undefined) return false;
    if (!('user' in value) || value['user'] === undefined) return false;
    return true;
}

export function CompleteActionLogFromJSON(json: any): CompleteActionLog {
    return CompleteActionLogFromJSONTyped(json, false);
}

export function CompleteActionLogFromJSONTyped(json: any, ignoreDiscriminator: boolean): CompleteActionLog {
    if (json == null) {
        return json;
    }
    return {
        
        'targetName': json['targetName'],
        'targetId': json['targetId'],
        'flags': ((json['flags'] as Array<any>).map(ActionLogFlagsFromJSON)),
        'targetType': ActionLogTargetFromJSON(json['targetType']),
        'id': json['id'],
        'time': (new Date(json['time'])),
        'operation': ActionLogOperationFromJSON(json['operation']),
        'user': UserProfileFromJSON(json['user']),
    };
}

export function CompleteActionLogToJSON(json: any): CompleteActionLog {
    return CompleteActionLogToJSONTyped(json, false);
}

export function CompleteActionLogToJSONTyped(value?: CompleteActionLog | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'targetName': value['targetName'],
        'targetId': value['targetId'],
        'flags': ((value['flags'] as Array<any>).map(ActionLogFlagsToJSON)),
        'targetType': ActionLogTargetToJSON(value['targetType']),
        'id': value['id'],
        'time': ((value['time']).toISOString()),
        'operation': ActionLogOperationToJSON(value['operation']),
        'user': UserProfileToJSON(value['user']),
    };
}

