openapi: 3.0.3
info:
  title: Domotique API
  description: API documentation for the Domotique application
  version: 1.0.0
servers:
  - url: http://localhost:7777
    description: Development server

components:
  schemas:
    PublicUser:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 42
        email:
          type: string
          format: email
          example: "user@example.com"
        gender:
          type: string
          enum: [MALE, FEMALE, OTHER]
          example: "MALE"

    RegisterInput:
      type: object
      required:
        - email
        - gender
        - password
      properties:
        email:
          type: string
          format: email
        gender:
          type: string
          enum: [MALE, FEMALE, OTHER]
        password:
          type: string
          format: password
          minLength: 8

    LoginInput:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    Error:
      type: object
      properties:
        message:
          type: string
          example: "L'e-mail est invalide."
        code:
          type: string
          example: "ALREADY_LOGGED_IN"

  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionId

paths:
  /api/users/me:
    get:
      summary: Get current user profile
      description: Returns information about the currently logged-in user
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Current user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUser'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users:
    post:
      summary: Register a new user
      description: Creates a new user account and automatically logs them in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterInput'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUser'
        '400':
          description: Bad request (already logged in)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/login:
    post:
      summary: User login
      description: Authenticates a user and creates a session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInput'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUser'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/users/logout:
    post:
      summary: Logout current user
      description: Ends the user's session
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: 'null'

  /api/users/{userId}:
    get:
      summary: Get user by ID
      description: Returns public information about a specific user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUser'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'